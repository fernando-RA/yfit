# Generated by Django 2.2.20 on 2021-05-19 10:25

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models
from django.db.migrations.exceptions import InvalidMigrationPlan


def migrate_old_payments(apps, schema_editor):
    PaymentDetail = apps.get_model("users", "PaymentDetail")
    Price = apps.get_model("users", "Price")
    Payment = apps.get_model("users", "Payment")
    prices = Price.objects.all()
    for price in prices:
        payment = Payment.objects.create(
            success=price.success,
            recurring=price.recurring,
            cancelled=price.cancelled,
            price=price.price,
            currency=price.currency,
            subscription_id=price.subscription_id,
            invoice_id=price.invoice_id,
            client=price.payment.client,
            trainer=price.payment.trainer,
            client_class=price.payment.client_class,
        )
        if price.subscription_id and price.subscription_id.startswith("sub_"):
            if len(Payment.objects.filter(subscription_id=price.subscription_id)) == 1:
                payment.payment_type = "subscription creation"
            else:
                payment.payment_type = "subscription update"
        elif price.subscription_id and price.subscription_id.startswith("ch_"):
            payment.payment_type = "charge"
        elif price.payment.client_class:
            payment.payment_type = "checkout payment"
        payment.save()
        Payment.objects.filter(pk=payment.id).update(
            create_date_time=price.create_date_time,
            updated_date_time=price.updated_date_time,
        )
    if not len(Price.objects.all()) == len(Payment.objects.all()):
        raise InvalidMigrationPlan("Count of prices and payments instances must be equal")


class Migration(migrations.Migration):

    dependencies = [
        ("trainer_classes", "0016_auto_20210513_1220"),
        ("users", "0032_auto_20210513_1220"),
    ]

    operations = [
        migrations.CreateModel(
            name="Payment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("create_date_time", models.DateTimeField(auto_now_add=True)),
                ("updated_date_time", models.DateTimeField(auto_now=True)),
                ("success", models.BooleanField(default=False)),
                ("recurring", models.BooleanField(default=False)),
                ("cancelled", models.BooleanField(default=False)),
                ("price", models.FloatField(default=0.0)),
                ("currency", models.CharField(max_length=50, null=True)),
                (
                    "subscription_id",
                    models.CharField(blank=True, max_length=250, null=True),
                ),
                ("invoice_id", models.CharField(blank=True, max_length=250, null=True)),
                (
                    "payment_intent_id",
                    models.CharField(blank=True, max_length=250, null=True),
                ),
                (
                    "payment_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("charge", "Charge"),
                            ("subscription creation", "Subscription creation"),
                            ("subscription update", "Subscription update"),
                            ("checkout payment", "Checkout payment"),
                        ],
                        default="charge",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "client",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transferred_payments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "client_class",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="client_class_payments",
                        to="trainer_classes.ClientClassSignUp",
                    ),
                ),
                (
                    "trainer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="received_payments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["-updated_date_time"], name="users_payme_updated_93735a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["recurring"], name="users_payme_recurri_8c6e70_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["subscription_id"], name="users_payme_subscri_0849b8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["client", "trainer"], name="users_payme_client__8c72ed_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["payment_type"], name="users_payme_payment_c98e8f_idx"
            ),
        ),
        migrations.RunPython(migrate_old_payments),
    ]
